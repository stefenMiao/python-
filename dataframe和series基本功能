---------重新索引reindex---------
创建新的对象，使它的数据符合新的索引，原始索引存在则保留，不存在则产生缺失值
  obj=pd.Series([1,4,5,3],index=["a","b","c","d"])
  a    1
  b    4
  c    5
  d    3
  obj.reindex(["b","d","f"]) 
  b    4.0
  d    3.0
  f    NaN

ffill方法
forward fill 向前填充
  obj=pd.Series(["a","b","c"],index=[0,2,4])
  0    a
  2    b
  4    c
  obj.reindex(range(6),method="ffill") #ffill要加引号
  0    a
  1    a
  2    b
  3    b
  4    c
  5    c
  
fill_value参数
把nan替换为fill_value指定的值

dataframe.reindex
可以修改行索引或者列索引
行索引
         year state
  one       1     b
  two       2     c
  three     3     a
  four      4     v
  frame.reindex(["two","one"])
       year state
  two     2     c
  one     1     b
列索引
  frame.reindex(columns=["state","year","add"])
        state  year  add
  one       b     1  NaN
  two       c     2  NaN
  three     a     3  NaN
  four      v     4  NaN
  

---------丢弃指定轴上的项---------
drop方法
返回在指定轴删除了特定值的新对象（产生副本）
Series：
  obj
  0    a
  2    b
  4    c
  obj.drop(0) 
  2    b
  4    c
  
Dataframe：
          year state
  one       1     b
  two       2     c
  three     3     a
  four      4     v
默认从行标签删除（axis=0）
  frame.drop("one")
         year state
  two       2     c
  three     3     a
  four      4     v
从列标签中删除（axis=1）
  frame.drop("year",axis=1)
        state
  one       b
  two       c
  three     a
  four      v
 
 
inpalce参数
true时就地修改对象，不返回新的对象




---------索引，选取和过滤---------
Series索引
obj
a    0
b    1
c    2
d    3
obj[2]-> 2
obj["a"]-> 0
obj[2:4]-> c    2
           d    3
obj["b":"d"]-> b    1 #当用标签切片时包含末端
               c    2
               d    3
可以在切片时进行赋值 obj["b":"d"]=5


dataframe索引
用一个值或序列对dataframe进行索引其实是获得一个或多个列
         year state
  one       1     b
  two       2     c
  three     3     a
  four      4     v
  frame["year"]
  one      1
  two      2
  three    3
  four     4
可以使用数字编号进行切片，但不能通过数字序号直接索引
frame[0] Error
frame[0:2] Fine


loc和iloc进行选取
loc:轴标签 iloc:整数索引
     one  two  three  four
  a    0    1      2     3
  b    4    5      6     7
  c    8    9     10    11
  d   12   13     14    15

  frame.loc["a",["two","three"]] #注意是中括号，不是圆括号
  two      1
  three    2

  frame.iloc[1,[2,3]]
  three    6
  four     7

  frame.iloc[[1,2],[2,3]]
     three  four
  b      6     7
  c     10    11

适用于一个或多个标签切片
  frame.loc["a":,["two","three"]]
     two  three
  a    1      2
  b    5      6
  c    9     10
  d   13     14


整数索引
若使用整数索引，为了防止歧义，则需加上iloc（防止标签也是整数的情况）


算术运算和数据对齐
pandas对不同的索引对象进行算术运算
  s1
  a    1
  b    2
  d    3
  e    5
  s2
  a    4
  b    7
  c    8
  d    1
  f    2
  s1+s2
  a    5.0
  b    9.0
  c    NaN
  d    4.0
  e    NaN
  f    NaN
自动数据对齐在不重叠的索引处加入了缺失值，缺失值会在运算过程中传播

对于dataframe，算数运算后行和列为原来的并集
df1
       b   d   e
utah   0   1   2
ohio   3   4   5
texas  6   7   8
color  9  10  11
df1
       b  c  d
utah   0  1  2
ohio   3  4  5
texas  6  7  8
df2+df1
          b   c     d   e
color   NaN NaN   NaN NaN
ohio    6.0 NaN   9.0 NaN
texas  12.0 NaN  15.0 NaN
utah    0.0 NaN   3.0 NaN


算数方法中填充值
进行算数运算时，当某个对象中某个轴标签在另一个对象中找不到时填充一个特殊值（比如0）
df1
   a  b   c   d
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11

df2
    a   b   c   d   e
0   0   1   2   3   4
1   5   6   7   8   9
2  10  11  12  13  14
3  15  16  17  18  19

加上缺失值 df2.loc[1,"b"]=np.nan  ->    a     b   c   d   e
                                  0   0   1.0   2   3   4
                                  1   5   NaN   7   8   9
                                  2  10  11.0  12  13  14
                                  3  15  16.0  17  18  19
相加时，没有重叠的部分为nan（相当于屏蔽了[1,"b"]）
df1+df2
      a     b     c     d   e
0   0.0   2.0   4.0   6.0 NaN
1   9.0   NaN  13.0  15.0 NaN
2  18.0  20.0  22.0  24.0 NaN
3   NaN   NaN   NaN   NaN NaN

df1.add(df2,fill_value=0)     #nan部分保留了df1原始数据
      a     b     c     d     e
0   0.0   2.0   4.0   6.0   4.0
1   9.0   5.0  13.0  15.0   9.0
2  18.0  20.0  22.0  24.0  14.0
3  15.0  16.0  17.0  18.0  19.0

算术方法中，以“r”开头放的方法表示会翻转参数
1/df1=df1.rdiv(1)


dataframe和series之间的运算
dataframe和series之间的算数运算会将series的索引匹配到dataframe的列，然后沿着行向下广播，若索引找不到，则生成并集
df1
   a  b   c   d
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11
series
a     0
b     1
c     2
d     3
e    10
df1-series
   a  b  c  d   e
0  0  0  0  0 NaN
1  4  4  4  4 NaN
2  8  8  8  8 NaN

若匹配行，在列上传播，则加上（axis='index' or axis=0）
df1 
   a  b   c   d
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11
series
0    0
1    4
2    8
df1.sub(series,axis=0)
   a  b  c  d
0  0  1  2  3
1  0  1  2  3
2  0  1  2  3


函数应用和映射
numpy的元素级数组方法也可以用于pandas对象
df1 
          a         b         c         d
0 -0.262990 -0.020017  0.175732  0.977033
1 -0.468017  0.665477  0.915009 -1.019294
2 -0.198118 -0.602176  0.425881 -0.464765
3  0.002523  0.431296  0.621259 -0.958403
np.abs(df1)
          a         b         c         d
0  0.262990  0.020017  0.175732  0.977033
1  0.468017  0.665477  0.915009  1.019294
2  0.198118  0.602176  0.425881  0.464765
3  0.002523  0.431296  0.621259  0.958403

apply方法
将函数应用到由各列或行所形成的一位数组上
f=lambda x:x.max()-x.min()
df1.apply(f)  #在每列执行一次，返回series
a    0.470540
b    1.267653
c    0.739277
d    1.996327

df1.apply(f,axis=1)  #在每行执行，也可以传入参数axis='columns')
0    1.240023
1    1.934304
2    1.028057
3    1.579662

传递到apply的参数可以返回由多个值组成的series
def f(x):
  return pd.Series(data=[x.max(),x.min()],index=['max','min'])
df1.apply(f)
            a         b         c         d
max  0.002523  0.665477  0.915009  0.977033
min -0.468017 -0.602176  0.175732 -1.019294


applymap()方法
对DataFrame中的每个单元格执行指定函数的操作嘛，元素级函数
f=lambda x:'%.2f' %x
df1.applymap(f) 
       a      b     c      d
0  -0.26  -0.02  0.18   0.98
1  -0.47   0.67  0.92  -1.02
2  -0.20  -0.60  0.43  -0.46
3   0.00   0.43  0.62  -0.96


map()方法
对于series的元素级操作
df1['a']
0   -0.262990
1   -0.468017
2   -0.198118
3    0.002523
df1['a'].map(f)
0    -0.26
1    -0.47
2    -0.20
3     0.00


排序与排名
sort_index()方法
对行或者列索引进行排序
series
f    4
a    2
q    6
d    1

series.sort_index()
a    2
d    1
f    4
q    6

对于dataframe可以用axis参数
df1
    f   a   q   d
g   0   1   2   3
b   4   5   6   7
d   8   9  10  11
f  12  13  14  15

df1.sort_index()  #axis=0对行排序
    f   a   q   d
b   4   5   6   7
d   8   9  10  11
f  12  13  14  15
g   0   1   2   3

df1.sort_index(axis=1)  #axis=1对列排序
    a   d   f   q
g   1   3   0   2
b   5   7   4   6
d   9  11   8  10
f  13  15  12  14

ascending参数
True为升序排列，False为降序排序


sort_values()方法
按值对series排序
series.sort_values()  #nan值默认放在末尾
d    1
a    2
f    4
q    6
s    nan

按值对dataframe排序，可以在参数by中传入想排序的一个或多个列
frame.sort_values(by='b')
   a  b
2  0 -3
3  1  2
0  0  4
1  1  7

frame.sort_values(by=['b','a'])  #当传入多个列时，按照顺序依次完成排序
   a  b
2  0 -3
3  1  2
0  0  4
1  1  7















